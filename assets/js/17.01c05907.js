(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{290:function(t,a,s){"use strict";s.r(a);var n=s(14),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[t._v("#")]),t._v(" 策略模式")]),t._v(" "),a("h2",{attrs:{id:"一、概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[t._v("#")]),t._v(" 一、概述")]),t._v(" "),a("p",[t._v("策略模式 "),a("code",[t._v("（Strategy Pattern）")]),t._v(" 是一种行为型设计模式，它定义了一系列算法，并将每个算法封装起来，使得它们可以互相替换。策略模式可以让算法独立于使用它的客户端而变化。在软件开发中，策略模式通常用来处理算法的变化。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("JavaScript")]),t._v(" 中，策略模式通常用于替代条件语句，即把多个条件分支的代码块抽取出来，通过不同的策略对象来执行不同的代码块。")]),t._v(" "),a("h2",{attrs:{id:"二、实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、实现方式"}},[t._v("#")]),t._v(" 二、实现方式")]),t._v(" "),a("p",[t._v("策略模式通常由两个部分组成：")]),t._v(" "),a("ul",[a("li",[t._v("策略类：实现了具体的算法。")]),t._v(" "),a("li",[t._v("环境类（或上下文类）：维护一个对策略对象的引用，提供一个接口供客户端调用。")])]),t._v(" "),a("h2",{attrs:{id:"三、优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、优缺点"}},[t._v("#")]),t._v(" 三、优缺点")]),t._v(" "),a("h3",{attrs:{id:"_1-优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-优点"}},[t._v("#")]),t._v(" 1. 优点")]),t._v(" "),a("ul",[a("li",[t._v("策略模式可以将算法的实现与客户端代码分离，使得算法的变化不影响客户端的代码。")]),t._v(" "),a("li",[t._v("策略模式可以避免使用大量的条件语句，使代码更加简洁、易于维护和扩展。")]),t._v(" "),a("li",[t._v("策略模式可以提高代码的复用性，不同的策略类可以被多个客户端共享。")]),t._v(" "),a("li",[t._v("策略模式可以方便地进行单元测试，每个策略类都可以被单独测试。")])]),t._v(" "),a("h3",{attrs:{id:"_2-缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-缺点"}},[t._v("#")]),t._v(" 2. 缺点")]),t._v(" "),a("ul",[a("li",[t._v("客户端需要知道所有的策略类，选择合适的策略类需要一定的判断逻辑，增加了客户端的复杂性。")]),t._v(" "),a("li",[t._v("如果策略类数量过多，会导致类的数量增加，系统的复杂性也会增加。")])]),t._v(" "),a("h2",{attrs:{id:"四、适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、适用场景"}},[t._v("#")]),t._v(" 四、适用场景")]),t._v(" "),a("p",[t._v("策略模式适用于以下场景：")]),t._v(" "),a("ul",[a("li",[t._v("当一个对象需要根据不同的情况执行不同的代码逻辑时，可以使用策略模式来封装这些不同的代码逻辑，使得代码更加简洁和易于维护。。")]),t._v(" "),a("li",[t._v("当一个函数或方法需要有多个条件分支时，可以使用策略模式来避免嵌套过多的 if/else 语句，提高代码的可读性和可维护性。")]),t._v(" "),a("li",[t._v("当需要在运行时动态地选择算法时，可以使用策略模式来方便地进行算法的切换和选择。")])]),t._v(" "),a("h2",{attrs:{id:"五、例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、例子"}},[t._v("#")]),t._v(" 五、例子")]),t._v(" "),a("p",[t._v("在函数式编程中，策略模式通常通过函数实现。下面是一个使用 JavaScript 实现策略模式的示例代码：")]),t._v(" "),a("blockquote",[a("p",[t._v("绩效为 S 的人年终奖有 4 倍工资，绩效为 A 的人年终奖有 3 倍工资，绩效为 B 的人年终奖有 2 倍工资。")])]),t._v(" "),a("p",[t._v("首先，我们定义了三个绩效策略函数，分别对应 S、A、B 级绩效，它们都接受一个工资参数，并返回年终奖金额。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义绩效策略函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("performanceS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("salary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("performanceA")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("salary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("performanceB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("salary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("然后我们定义了一个年终奖函数 "),a("code",[t._v("bonus")]),t._v("，它接受工资和绩效策略函数两个参数，并调用传递进来的绩效策略函数来计算年终奖金额。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义年终奖函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bonus")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" performance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("在使用过程中，我们直接调用了 "),a("code",[t._v("bonus")]),t._v(" 函数，并传递了工资和绩效策略函数，即可获取年终奖金额。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用示例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" salary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"S 级绩效年终奖为："')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bonus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" performanceS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 40000")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A 级绩效年终奖为："')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bonus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" performanceA"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30000")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B 级绩效年终奖为："')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bonus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("salary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" performanceB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20000")]),t._v("\n")])])]),a("h2",{attrs:{id:"六、总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、总结"}},[t._v("#")]),t._v(" 六、总结")]),t._v(" "),a("p",[t._v("策略模式是一种行为型设计模式，它能够让你定义一系列算法，把它们一个个封装起来，并且使它们可以相互替换。策略模式让算法的变化独立于使用算法的客户端。")]),t._v(" "),a("p",[a("code",[t._v("JavaScript")]),t._v(" 中，策略模式通常用于替代条件语句，即把多个条件分支的代码块抽取出来，通过不同的策略对象来执行不同的代码块。我们可以通过对象字面量、函数声明或者类声明等方式来定义策略对象，然后在使用时通过传递不同的参数来选择对应的策略。使用策略模式可以提高代码复用和可维护性，同时也使代码更加灵活和可扩展。")]),t._v(" "),a("p",[t._v("需要注意的是，策略模式虽然可以使代码更加灵活，但同时也带来了一定的复杂性，需要根据具体的情况进行权衡和选择。")]),t._v(" "),a("p",[t._v("最后，使用策略模式需要注意避免过度设计，只有在实际开发中遇到多个条件分支或者需要动态选择算法的具体情况时才需要使用。在其他场景下，简单的条件分支或者函数调用可能更为适合。")])])}),[],!1,null,null,null);a.default=r.exports}}]);